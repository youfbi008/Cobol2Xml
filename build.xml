<?xml version="1.0" encoding="UTF-8"?>
<project name="Koopa" default="build" basedir=".">

	<target name="clean">
		<delete dir="build/" />
	</target>

	<target name="build" depends="bootstrap,back-end,grammar,applications">
	</target>


	<!-- BOOTSTRAP -->

	<target name="bootstrap" depends="bootstrap-generate,bootstrap-compile">
	</target>

	<target name="bootstrap-generate">


	</target>

	<target name="bootstrap-build">
		<mkdir dir="build/" />
	</target>

	<target name="bootstrap-compile" depends="bootstrap-build,revision-number">
		<echo>Compiling Koopa's core...</echo>
		<javac srcdir="src/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="src/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>


	<!-- GRAMMAR COMPILATION -->

	<target name="update-kg-tokens" depends="bootstrap">
		<echo>Copying the latest KG.tokens definition...</echo>


	</target>

	<target name="grammar-cobol-preprocessing" depends="update-kg-tokens">
		<echo>Generating the Cobol parser...</echo>
		<kgg name="CobolPreprocessing" pack="koopa.grammars.cobolPreprocessing" path="grammar/koopa/grammars/cobolPreprocessing/" />

		<echo>Generating secondary classes...</echo>

		<!--
		<generate-verifications name="Cobol" pack="koopa.grammars.cobol" path="grammar/koopa/grammars/cobol/" />
		<antlr-gen2 grammar="grammar/koopa/grammars/cobol/antlr/CobolTreeParser.g" tokens="grammar/koopa/grammars/cobol/antlr/" />
		<kg2dtd name="Cobol" path="grammar/koopa/grammars/cobol/" output="grammar/koopa/grammars/cobol/antlr/" />
-->
		<!-- TODO This file fails to compile in ANT, but compiles correctly in my Eclipse... -->
		<delete file="grammar/koopa/grammars/cobol/antlr/CobolTreeParser.java">
		</delete>
		<!--
		<echo>Compiling Cobol parser...</echo>
		<javac srcdir="grammar/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
-->
	</target>

	<target name="grammar-cobol" depends="update-kg-tokens, grammar-cobol-preprocessing">
		<echo>Generating the Cobol parser...</echo>
		<kgg name="Cobol" pack="koopa.grammars.cobol" path="grammar/koopa/grammars/cobol/" />

		<echo>Generating secondary classes...</echo>


		<antlr-gen2 grammar="grammar/koopa/grammars/cobol/antlr/CobolTreeParser.g" tokens="grammar/koopa/grammars/cobol/antlr/" />


		<!-- TODO This file fails to compile in ANT, but compiles correctly in my Eclipse... -->
		<delete file="grammar/koopa/grammars/cobol/antlr/CobolTreeParser.java">
		</delete>

		<echo>Compiling Cobol parser...</echo>
		<javac srcdir="grammar/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="grammar" depends="bootstrap, update-kg-tokens, grammar-cobol-preprocessing, grammar-cobol">
		<echo>Copying additional grammar resources...</echo>
		<copy todir="build/">
			<fileset dir="grammar/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>


	<!-- UNIT TESTS -->

	<target name="tests" depends="bootstrap,grammar">
		<echo>Generating unit tests...</echo>


		<echo>Compiling unit tests...</echo>

	</target>

	<target name="run-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<formatter type="brief" usefile="no" />

			<test name="koopa.tokenstreams.test.TokenStreamTests" />
			<test name="koopa.tokenizers.test.TokenizerTests" />
			<test name="koopa.parsers.test.KoopaGrammarTest" />

			<test name="koopa.tokenizers.cobol.test.CompilerDirectivesTokenizerTest" />
			<test name="koopa.tokenizers.cobol.test.TokenizerTest" />
			<test name="koopa.grammars.cobol.test.CobolGrammarTests" />

			<test name="koopa.parsers.cobol.test.Cobol85RegressionTest" />
		</junit>
	</target>

	<target name="run-regression-test">
		<regression-test folder="testsuite/cobol85/" results="testsuite/cobol85-results.csv" targets="testsuite/cobol85.csv" />
	</target>


	<!-- BACK END -->

	<target name="back-end" depends="bootstrap,back-end-generate,back-end-compile">
	</target>

	<target name="back-end-generate">
		<echo>Generating the ANTLR tree filter generator...</echo>
		<antlr-gen grammar="back-end/koopa/trees/antlr/filter/generator/ANTLRv3.g" />
		<antlr-gen2 grammar="back-end/koopa/trees/antlr/filter/generator/ANTLRv3Tree.g" tokens="back-end/koopa/trees/antlr/filter/generator/" />
		<antlr-gen2 grammar="back-end/koopa/trees/antlr/filter/generator/ANTLRv3TreeFilter.g" tokens="back-end/koopa/trees/antlr/filter/generator/" />
	</target>

	<target name="back-end-compile">
		<echo>Compiling back end...</echo>
		<javac srcdir="back-end/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="back-end/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>


	<!-- APPLICATIONS -->

	<target name="applications" depends="bootstrap,grammar,back-end">
		<echo>Copying the latest Cobol.tokens definition...</echo>
		<synchronize-file file="grammar/koopa/grammars/cobol/antlr/Cobol.tokens" root="app/" />

		<echo>Generating the Cobol outline parser...</echo>


		<echo>Generating the cyclometic complexity parser...</echo>


		<echo>Generating tree filters...</echo>
		<generate-tree-filters root="app/" />

		<echo>Compiling processing classes...</echo>
		<javac srcdir="app/" destdir="build/" debug="on" source="1.5">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="app/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>




	<target name="jar">
		<jar destfile="Cobol2Xml.jar" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="koopa.app.cli.ToXml" />
				<attribute name="Class-Path" value="." />
			</manifest>
			<fileset dir="build" />
			<!--		<zipfileset excludes="META-INF/*.SF" src="lib/swingx-1.0.jar" />  -->
			<zipfileset excludes="META-INF/*.SF" src="lib/stringtemplate-3.2.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/antlr-2.7.7.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/antlr-3.1.1-runtime.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/jaxen-1.1.1.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-1.2.16.jar" />
		</jar>
	</target>

	<!-- SVN -->

	<target name="revision-number" depends="bootstrap-build">
		<!-- find out revision number of HEAD, need svn.exe installed on local machine -->


		<property name="revision" value="unknown"/>

		<echo file="build/REVISION" message="${revision}" />
	</target>

	<!-- MACROS -->

	<macrodef name="antlr-gen">
		<attribute name="grammar" />
		<sequential>
			<java classname="org.antlr.Tool" fork="true">
				<classpath>
					<pathelement location="lib/antlr-3.1.1.jar" />
				</classpath>
				<arg value="@{grammar}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="antlr-gen2">
		<attribute name="grammar" />
		<attribute name="tokens" />
		<sequential>
			<java classname="org.antlr.Tool" fork="true">
				<classpath>
					<pathelement location="lib/antlr-3.1.1.jar" />
				</classpath>
				<arg value="-lib" />
				<arg value="@{tokens}" />
				<arg value="@{grammar}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="kgg">
		<attribute name="name" />
		<attribute name="pack" />
		<attribute name="path" />
		<sequential>
			<java classname="koopa.grammars.generator.KGG" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{name}" />
				<arg value="@{pack}" />
				<arg value="@{path}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="generate-verifications">
		<attribute name="name" />
		<attribute name="pack" />
		<attribute name="path" />
		<sequential>
			<java classname="koopa.verifiers.generator.GenerateVerifications" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{name}" />
				<arg value="@{pack}" />
				<arg value="@{path}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="kg2antlr">
		<attribute name="name" />
		<attribute name="pack" />
		<attribute name="path" />
		<attribute name="output" />
		<sequential>
			<java classname="koopa.trees.antlr.generator.KGToANTLR" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{name}" />
				<arg value="@{pack}" />
				<arg value="@{path}" />
				<arg value="@{output}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="kg2dtd">
		<attribute name="name" />
		<attribute name="path" />
		<attribute name="output" />
		<sequential>
			<java classname="koopa.trees.antlr.dtd.KGToDTD" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{name}" />
				<arg value="@{path}" />
				<arg value="@{output}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="generate-unit-test">
		<attribute name="path" />
		<sequential>
			<java classname="koopa.grammars.test.generator.GenerateUnitTests" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{path}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="synchronize-file">
		<attribute name="file" />
		<attribute name="root" />
		<sequential>
			<java classname="koopa.util.ANTSynchronize" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{file}" />
				<arg value="@{root}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="generate-tree-filters">
		<attribute name="root" />
		<sequential>
			<java classname="koopa.trees.antlr.filter.generator.GenerateANTLRv3TreeFilters" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{root}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="regression-test">
		<attribute name="targets" />
		<attribute name="results" />
		<attribute name="folder" />
		<sequential>
			<java classname="koopa.grammars.test.RegressionTest" fork="true">
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
				<arg value="@{targets}" />
				<arg value="@{results}" />
				<arg value="@{folder}" />
			</java>
		</sequential>
	</macrodef>

</project>
