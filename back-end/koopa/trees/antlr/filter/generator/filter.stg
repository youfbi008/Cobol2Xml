group Filter;

filter(id, pack, rule) ::= <<
package $pack$;

import koopa.trees.antlr.filter.Filter;
import koopa.trees.antlr.filter.FutureFilter;
import koopa.trees.antlr.filter.TreeNodeStreamFilter;

public class $id$Filter extends TreeNodeStreamFilter {

    // ========================================================
    // Compiled filter rules. These were generated from the
    // grammar.
    // --------------------------------------------------------

    $rule; separator="\n\n"$
}
>>

rule(id, body) ::= <<
// ========================================================
// $id$
// ........................................................

private Filter $id$Filter = null;

public Filter $id$() {
    if ($id$Filter == null) {
       FutureFilter future = new FutureFilter();
       $id$Filter = future;
       future.setFilter(
           $body$
       );
    }
    
    return $id$Filter;
}
>>

or(alternative) ::= <<
or(
    $alternative; separator=",\n"$
)>>

seq(element) ::= <<
seq(
    $element; separator=",\n"$
)>>

subtree(id, scop, element) ::= <<
tree($scop$.$id$,
    seq(
        $element; separator=",\n"$
    )
)>>

token(scop, id) ::= <<node($scop$.$id$)>>

star(block) ::= <<
star(
    $block$
)>>

opt(block) ::= <<
opt(
    $block$
)>>

ref(id) ::= <<$id$()>>

literal(value) ::= <<literal("$value$")>>
