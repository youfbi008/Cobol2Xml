<!ELEMENT koopa (compilationGroup|copybook)>
<!ELEMENT compilationGroup ((compilerDirective|compilationUnit)*)>
<!ELEMENT copybook (copybookHoldingData|copybookHoldingBehaviour)>
<!ELEMENT copybookHoldingData ((dataDescriptionEntry|specialNameStatement|(fileDescriptionEntry,recordDescriptionEntry*)|(selectStatement,t?)|copyStatement|replaceStatement|(execStatement,t?))+)>
<!ELEMENT copybookHoldingBehaviour (sentence*,paragraph*,section*)>
<!ELEMENT compilationUnit (((identificationDivision,environmentDivision?,dataDivision?)|(environmentDivision,dataDivision?)|dataDivision),(procedureDivision,compilationUnit*)?,endMarker?)>
<!ELEMENT endMarker ((t+,functionName,t)|(t+,className,t)|(t+,t)|(t+,t)|(t+,t)|(t+,t)|(t+,methodName?,t)|(t+,interfaceName,t)|(t+,delegateName,t)|(t+,enumName,t)|(t+,cobolWord,t)|(t+,valuetypeName,t)|(t+,programName,t))>
<!ELEMENT identificationDivision ((t,t+,identificationDivisionBody?)|identificationDivisionBody)>
<!ELEMENT identificationDivisionBody ((callPrototypeIdParagraph|programPrototypeIdParagraph|programIdParagraph|classIdParagrah|factoryParagraph|objectParagraph|methodIdParagraph|interfaceIdParagraph|functionIdParagraph|delegateIdParagraph|enumIdParagraph|iteratorIdParagraph|operatorIdParagraph|valuetypeIdParagraph|(t+,water?,t)|(t+,water?,t)|(t+,water?,t)|(t+,water?,t)|(t+,water?,t)|(t+,water?,t))+,water?)>
<!ELEMENT callPrototypeIdParagraph (t,t?,programName,t?,t,t?,t?)>
<!ELEMENT programPrototypeIdParagraph (t,t?,programName,(t,literal)?,t?,t,t?)>
<!ELEMENT programIdParagraph (t,t?,programName,(t,literal)?,(t?,((t,t?)|(t,t?)|t),t?)?,(water?,t)?)>
<!ELEMENT classIdParagrah (t,t?,className,(t,literal)?,(t,t?,typeSpecifier+)?,(t?,t)?,(t+)?,(t?,t)?,attributeClause?,(t,typeSpecifier+)?,(t,parameterName+)?,t?)>
<!ELEMENT factoryParagraph (t,t?,(t,interfaceName+,t)?)>
<!ELEMENT objectParagraph (t,t?,(t,interfaceName+,t)?)>
<!ELEMENT methodIdParagraph (t,t?,(methodName|(t+,propertyName)),(t,literal)?,t?,(t?,(t|(t?,t)))?,(t?,t)?,t?,(t?,t)?,(t,interfaceName)?,attributeClause?,(t,parameterName+)?,t?)>
<!ELEMENT interfaceIdParagraph (t,t?,interfaceName,(t,literal)?,(t?,t)?,(t,t?,typeSpecifier+)?,attributeClause?,(t,parameterName+)?,t?)>
<!ELEMENT functionIdParagraph (t,t?,functionName,(t,literal)?,(t?,t)?,t?)>
<!ELEMENT delegateIdParagraph (t,t?,delegateName,(t,literal)?,(t+)?,attributeClause?,t?)>
<!ELEMENT enumIdParagraph (t,t?,enumName,(t,literal)?,(t+)?,attributeClause?,t?)>
<!ELEMENT iteratorIdParagraph (t,t?,iteratorName,(t,literal)?,(t+)?,attributeClause?,t?)>
<!ELEMENT operatorIdParagraph (t,t?,((t,t?)|t),t?)>
<!ELEMENT valuetypeIdParagraph (t,t?,valuetypeName,(t,literal)?,(t?,t)?,(t?,t)?,attributeClause?,(t,interfaceName+)?,t?)>
<!ELEMENT attributeClause (((t,attributeName,t,((t,propertyName,t,propertyValue)|parameterName)*,t)|(t+,className,(t,((propertyName,t,propertyValue)|parameterName)*,t)?))+)>
<!ELEMENT environmentDivision ((t+,environmentDivisionBody?)|environmentDivisionBody|(configurationSectionBody,ioSection?,water?)|(ioSectionBody,configurationSection?,water?))>
<!ELEMENT environmentDivisionBody ((configurationSection|ioSection|objectSection)+,water?)>
<!ELEMENT configurationSection (t+,configurationSectionBody?)>
<!ELEMENT configurationSectionBody ((sourceComputerParagraph|objectComputerParagraph|specialNamesParagraph|repositoryParagraph|constraintsParagraph|classAttributesParagraph|assemblyAttributesParagraph)+,water?)>
<!ELEMENT sourceComputerParagraph (t+,(computerName,withDebuggingMode?,t)?,water?)>
<!ELEMENT withDebuggingMode (t?,t,t)>
<!ELEMENT objectComputerParagraph (t+,(computerName,water?,t)?,water?)>
<!ELEMENT constraintsParagraph (t+,water?)>
<!ELEMENT classAttributesParagraph (t+,water?)>
<!ELEMENT assemblyAttributesParagraph (t+,water?)>
<!ELEMENT genericStringDef (alphanumeric*,(t,t)?,t?)>
<!ELEMENT specialNamesParagraph (t+,(specialNameStatement|copyStatement)*,t?,water?)>
<!ELEMENT specialNameStatement (consoleIsCRT|alphabetIs|symbolicChars|classIs|localeIs|currencySignIs|decimalIsComma|numericSignIs|callConvention|cursorIs|crtStatusIs|xmlSchemaIs|screenControlIs|eventStatusIs|(cobolSwitch,t,mnemonicName,(t,t?,t?,conditionName)*)|(cobolDevice,t,mnemonicName))>
<!ELEMENT consoleIsCRT (t,t?,t)>
<!ELEMENT cobolDevice (t|alphanumericLiteral|cobolWord)>
<!ELEMENT cobolSwitch (t)>
<!ELEMENT alphabetIs (t,identifier,t?,alphabetType)>
<!ELEMENT alphabetType (standard1AlphabetType|standard2AlphabetType|nativeAlphabetType|asciiAlphabetType|ebcdicAlphabetType|explicitAlphabetType|codeNameAlphabetType)>
<!ELEMENT standard1AlphabetType (t)>
<!ELEMENT standard2AlphabetType (t)>
<!ELEMENT nativeAlphabetType (t)>
<!ELEMENT asciiAlphabetType (t)>
<!ELEMENT ebcdicAlphabetType (t)>
<!ELEMENT explicitAlphabetType ((literalRange|literal),(t,(literalRange|literal))*)>
<!ELEMENT codeNameAlphabetType (cobolWord)>
<!ELEMENT literalRange (literal,t,literal)>
<!ELEMENT symbolicChars (t,t?,(literal+,t?,integer+)+,(t,identifier)?)>
<!ELEMENT classIs (t,identifier,t?,(literalRange|literal)+)>
<!ELEMENT localeIs (t,identifier,t?,identifier)>
<!ELEMENT currencySignIs (t,t?,t?,literal)>
<!ELEMENT decimalIsComma (t,t?,t)>
<!ELEMENT numericSignIs (t+,t,(t,t?)?)>
<!ELEMENT callConvention (t,integer,t?,mnemonicName)>
<!ELEMENT cursorIs (t,t?,dataName)>
<!ELEMENT crtStatusIs (t+,dataName)>
<!ELEMENT xmlSchemaIs (t,identifier,t?,(dataName|literal))>
<!ELEMENT screenControlIs (t+,identifier)>
<!ELEMENT eventStatusIs (t+,identifier)>
<!ELEMENT repositoryParagraph (t+,((classSpecifier|interfaceSpecifier|programSpecifier|propertySpecifier|functionSpecifier|delegateSpecifier|enumSpecifier)+,t)?)>
<!ELEMENT classSpecifier (t,className,(t,literal)?,(t,className,t,(className|interfaceName))?)>
<!ELEMENT interfaceSpecifier (t,interfaceName,(t,literal)?,(t,interfaceName,t,(className|interfaceName))?)>
<!ELEMENT programSpecifier (t,programName,(t,literal)?)>
<!ELEMENT propertySpecifier (t,propertyName,(t,literal)?)>
<!ELEMENT functionSpecifier (t,(((t|functionName),t)|(functionName,(t,literal)?)))>
<!ELEMENT delegateSpecifier (t,delegateName,(t,literal)?)>
<!ELEMENT enumSpecifier (t,enumName,(t,literal)?)>
<!ELEMENT ioSection (t+,ioSectionBody?)>
<!ELEMENT ioSectionBody ((fileControlParagraph|ioControlParagraph)+,water?)>
<!ELEMENT fileControlParagraph (t+,fileControlEntry?)>
<!ELEMENT fileControlEntry ((selectStatement|copyStatement)+)>
<!ELEMENT selectStatement (selectClause,assignClause,(organizationClause|collationClause|recordDelimiterClause|reserveClause|accessModeClause|lockModeClause|relativeKeyClause|recordKeyClause|alternateRecordKeyClause|fileStatusClause|sharingClause|paddingClause)*,t)>
<!ELEMENT selectClause (t,(t|(t,t))?,fileName)>
<!ELEMENT assignClause (t,(assignUsingClause|assignToClause))>
<!ELEMENT assignUsingClause (t,dataName)>
<!ELEMENT assignToClause (t?,t?,(diskClause|dataName|assignmentName))>
<!ELEMENT diskClause ((t+,dataName)|(t+,(dataName|literal)+)|(t?,t,t?,(dataName|literal)+)|(t?,t,(dataName|literal)+)|(t,t)|(t?,(dataName|literal)*))>
<!ELEMENT collationClause (t,t?,t?,alphabetName)>
<!ELEMENT recordDelimiterClause (t+,(t|alphanumericLiteral))>
<!ELEMENT reserveClause (t,(integer|t),t?,t)>
<!ELEMENT organizationClause ((t,t?)?,(t|(t,t)|t)?,t)>
<!ELEMENT accessModeClause (t,t?,t?,(t|(t,lockModeWithClause?)|(t,lockModeWithClause?)))>
<!ELEMENT lockModeClause (t,t?,t?,(t|(t,lockModeWithClause?)|(t,lockModeWithClause?)))>
<!ELEMENT lockModeWithClause (t?,(t|(t+,t)))>
<!ELEMENT relativeKeyClause (t,t?,t?,recordKeyDefinition)>
<!ELEMENT recordKeyClause (t,t?,t?,recordKeyDefinition,passwordClause?)>
<!ELEMENT alternateRecordKeyClause (t,t?,t?,t?,recordKeyDefinition,(passwordClause|suppressClause|(t?,t))*)>
<!ELEMENT recordKeyDefinition (((literal|identifier),(t|(t,t?)),dataName+)|dataName)>
<!ELEMENT fileStatusClause (t?,t,t?,dataName,dataName?)>
<!ELEMENT passwordClause (t,t?,dataName)>
<!ELEMENT suppressClause (t,t?,(zero|space|(t?,literal)))>
<!ELEMENT sharingClause (t,t?,((t,t)|(t,t?)))>
<!ELEMENT paddingClause (t,t?,t?,(literal|identifier))>
<!ELEMENT ioControlParagraph (t+,water?)>
<!ELEMENT objectSection ((t+,objectSectionBody?)|objectSectionBody)>
<!ELEMENT objectSectionBody ((classControlParagraph|copyStatement)+)>
<!ELEMENT classControlParagraph (t+,((className,t+,literal)|copyStatement)+,t?)>
<!ELEMENT dataDivision ((t+,dataDivisionBody?)|dataDivisionBody)>
<!ELEMENT dataDivisionBody ((fileSection|workingStorageSection|threadLocalStorageSection|objectStorageSection|localStorageSection|linkageSection|communicationSection|reportSection|screenSection)+)>
<!ELEMENT fileSection (t+,fileSectionBody?)>
<!ELEMENT fileSectionBody ((copyStatement|(fileDescriptionEntry,recordDescriptionEntry*))+,water?)>
<!ELEMENT recordDescriptionEntry (dataDescriptionEntry|copyStatement)>
<!ELEMENT workingStorageSection (t+,(recordDescriptionEntry|replaceStatement|(execStatement,t?))*)>
<!ELEMENT threadLocalStorageSection (t+,(recordDescriptionEntry|replaceStatement|(execStatement,t?))*)>
<!ELEMENT objectStorageSection (t+,(recordDescriptionEntry|replaceStatement|(execStatement,t?))*)>
<!ELEMENT localStorageSection (t+,(recordDescriptionEntry|replaceStatement|(execStatement,t?))*)>
<!ELEMENT linkageSection (t+,(recordDescriptionEntry|replaceStatement|(execStatement,t?))*)>
<!ELEMENT communicationSection (t+,(communicationDescriptionEntry|recordDescriptionEntry)*)>
<!ELEMENT communicationDescriptionEntry (communicationDescriptionEntry_format1|communicationDescriptionEntry_format2|communicationDescriptionEntry_format3)>
<!ELEMENT communicationDescriptionEntry_format1 (t,cdName,t?,t?,t,(dataDescName+|((t?,t,t?,dataDescName)|(t?,t,t?,dataDescName)|(t?,t,t?,dataDescName)|(t?,t,t?,dataDescName)|(t+,dataDescName)|(t+,dataDescName)|(t?,t,t?,dataDescName)|(t+,dataDescName)|(t+,dataDescName)|(t+,dataDescName)|(t?,t,t?,dataDescName))*),t)>
<!ELEMENT communicationDescriptionEntry_format2 (t,cdName,t?,t,(t+,dataDescName)?,(t+,dataDescName)?,(t+,dataDescName)?,(t+,integer,t?,(t,t?,indexName+)?)?,(t+,dataDescName)?,(t?,t,t?,dataDescName)?,t)>
<!ELEMENT communicationDescriptionEntry_format3 (t,cdName,t?,t?,t,(dataDescName+|((t+,dataDescName)|(t+,dataDescName)|(t?,t,t?,dataDescName)|(t+,dataDescName)|(t+,dataDescName)|(t+,dataDescName))*),t)>
<!ELEMENT reportSection (t+,(reportDescriptionEntry,reportGroupDescriptionEntry+)*)>
<!ELEMENT reportDescriptionEntry (t,reportName,(t?,t)?,(t?,t,(literal|mnemonicName))?,(((t,t?)|(t,t?)),((t,dataName*)|dataName+))?,(t,t?,t?,integer,t?,(t,integer)?,(t+,integer)?,(t+,integer)?,(t,integer)?)?,t)>
<!ELEMENT reportGroupDescriptionEntry (reportGroupDescriptionEntry_format1|reportGroupDescriptionEntry_format2|reportGroupDescriptionEntry_format3)>
<!ELEMENT reportGroupDescriptionEntry_format1 (t,dataName?,(t,t?,t?,((integer,(t?,t,t)?)|(t,integer)|(t,t)))?,(t+,(integer|(t,integer)|(t,t)))?,t,t?,((t|(t,t))|(t|(t,t))|((t|(t,t)),(t|dataName))|(t)|((t|(t,t)),(t|dataName))|(t|(t,t))|(t|(t,t))),(t,t?,t)?,t)>
<!ELEMENT reportGroupDescriptionEntry_format2 (levelNumber,dataName?,(t,t?,t?,((integer,(t?,t,t)?)|(t,integer)|(t,t)))?,(t,t?,t)?,t)>
<!ELEMENT reportGroupDescriptionEntry_format3 (levelNumber,dataName?,(picture|(t,t?,t)|(t,t+)|(t,t?)|(t,t?,zero)|(t,t?,t?,((integer,(t?,t,t)?)|(t,integer)|(t,t)))|(t,t?,t?,integer)|((t,t?,identifier)|(t,t?,literal)|((t,identifier,(t,dataName+)?),(t,t?,(t|dataName))?))|(t,t?))*,t)>
<!ELEMENT screenSection (t+,water?)>
<!ELEMENT screenDescriptionEntry (levelNumber,(t|screenName)?,screenEntryPhrase*)>
<!ELEMENT fileDescriptionEntry (fdFileDescriptionEntry|sdFileDescriptionEntry)>
<!ELEMENT fdFileDescriptionEntry (t,fileName,(blockContains|codeSet|dataRecords|external|global|threadLocalClause|labelRecords|linage|record|recordingMode|valueOfFileId|valueOf|report)*,water?,t)>
<!ELEMENT sdFileDescriptionEntry (t,fileName,(blockContains|dataRecords|labelRecords|record|recordingMode|valueOfFileId)*,water?,t)>
<!ELEMENT blockContains (t,t?,integer,(t,integer)?,t?)>
<!ELEMENT codeSet (t,t?,alphabetName,(t,identifier+)?)>
<!ELEMENT dataRecords (t?,((t,t?)|(t,t?)),dataName+)>
<!ELEMENT labelRecords (t,((t,t?)|(t,t?)),(t|dataName+))>
<!ELEMENT linage (t,t?,(dataName|integer),t?,footing?,linesAtTop?,linesAtBottom?)>
<!ELEMENT footing (t?,t,t?,(dataName|integer))>
<!ELEMENT linesAtTop (t?,t?,t,(dataName|integer))>
<!ELEMENT linesAtBottom (t?,t?,t,(dataName|integer))>
<!ELEMENT record (t,((t?,integer,(t,integer)?,t?)|(t?,t,t?,t?,(t?,integer,(t,integer)?,t?)?,(t,t?,fileName)?)))>
<!ELEMENT recordingMode (t,t?,t?,t)>
<!ELEMENT valueOfFileId (t+,(dataName|literal))>
<!ELEMENT valueOf (t+,((t|cobolWord),t?,(dataName|literal))+)>
<!ELEMENT report (t,t?,reportName+)>
<!ELEMENT dataDescriptionEntry (constantDescriptionEntry|dataDescriptionEntry_format3|dataDescriptionEntry_format2|dataDescriptionEntry_format1)>
<!ELEMENT dataDescriptionEntry_format1 (levelNumber,dataDescName?,(redefines|external|global|typedefClause|threadLocalClause|picture|occurs|dtLinePos|dtColPos|sign|valueClause|sync|justified|blankWhenZero|anyLengthClause|autoPhrase|backgroundPhrase|beepPhrase|blinkPhrase|controlPhrase|erasePhrase|fillPhrase|foregroundPhrase|fullPhrase|gridPhrase|highPhrase|lowPhrase|linePhrase|promptPhrase|requiredPhrase|reversePhrase|securePhrase|sizePhrase|propertyClause|(t,identifier)|(t,(identifier|literal),(t,identifier)?)|t|based|attributeClause|usage|literal)*,water?,t)>
<!ELEMENT dataDescriptionEntry_format2 (t,dataName,t,qualifiedDataName,(t,qualifiedDataName)?,t)>
<!ELEMENT dataDescriptionEntry_format3 (t,conditionName,((t,t?)|(t,t?)),(literal,(t,literal)?)+,whenSetToFalseClause?,t)>
<!ELEMENT whenSetToFalseClause (t?,t?,t?,t,t?,literal)>
<!ELEMENT constantDescriptionEntry (((t,cobolWord,t,t?,valueIsOperand,(valueIsOperator,valueIsOperand)*)|(t,cobolWord,t,global?,((t?,identifier)|(t,cobolWord)))),t)>
<!ELEMENT redefines (t,cobolWord)>
<!ELEMENT blankWhenZero (t,t?,zero)>
<!ELEMENT anyLengthClause (t,t)>
<!ELEMENT external (t?,t,(t,literal)?)>
<!ELEMENT global (t?,t)>
<!ELEMENT typedefClause (t?,t)>
<!ELEMENT threadLocalClause (t?,t)>
<!ELEMENT zero (t)>
<!ELEMENT space (t)>
<!ELEMENT justified (t?,t,t?)>
<!ELEMENT occurs (t,(((integer,t)?,integer,t?,(t,t?,qualifiedDataName)?,(t,t?,t?,qualifiedDataName+)*,(t,t?,indexName+)*)|t)+)>
<!ELEMENT picture (t,t?,pictureString)>
<!ELEMENT sign ((t,t?)?,t,(t,t?)?)>
<!ELEMENT sync (t,t?)>
<!ELEMENT usage ((t,t?)?,usageClause)>
<!ELEMENT usageClause (t|(t,t?)|(t,t?)|(t,t?)|(t,t?)|t|(t+,(((t,t)?,t)|((t,t)?,className,t?))?)|t|(t,(t?,programName)?)|t|typedefName|className)>
<!ELEMENT valueClause (valueClause_format2|valueClause_format1)>
<!ELEMENT valueClause_start ((t,t?)|(t,t?))>
<!ELEMENT valueClause_format1 (valueClause_start,(literal|constant))>
<!ELEMENT valueClause_format2 (valueClause_start,(literal+,t+,subscript+,t,(t+,subscript+,t)?)+)>
<!ELEMENT valueIsOperand (t|(t,t?,dataName)|(t,t?,dataName)|arithmeticExpression|literal)>
<!ELEMENT valueIsOperator (t)>
<!ELEMENT based (t)>
<!ELEMENT propertyClause (t,(t?,t,t)?)>
<!ELEMENT procedureDivision (t+,mnemonicName?,usingOrChainingPhrase?,returningProcedurePhrase?,t,declaratives?,sentence*,paragraph*,section*)>
<!ELEMENT usingOrChainingPhrase (t,(dataReference|dataValue|dataOutput)+,repeatedPhrase?)>
<!ELEMENT dataReference ((t?,t)?,(t|(t?,dataName,(t,(t,t)?)?,(t,typeName,attributeClause?)?)|typedefName)+)>
<!ELEMENT dataValue (t?,t,(t|(dataName,(t,typeName,attributeClause?)?)|typedefName)+)>
<!ELEMENT dataOutput (t?,t,(dataName,t,typeName,attributeClause?)*)>
<!ELEMENT repeatedPhrase (t,(integer,t,integer)?)>
<!ELEMENT returningProcedurePhrase (t,dataName,(t,typeName,attributeClause?)?)>
<!ELEMENT declaratives (t+,declarativeSection*,t+,t)>
<!ELEMENT declarativeSection (sectionName,t+,useStatement,sentence*,paragraph*)>
<!ELEMENT section (sectionName,t,segmentNumber?,t,sentence*,paragraph*)>
<!ELEMENT paragraph (paragraphName,t,sentence*)>
<!ELEMENT sentence (compilerStatement|(statement,(compilerStatement|statement|continuationOfStatement)*,t)|t)>
<!ELEMENT statement (acceptStatement|addStatement|alterStatement|callStatement|chainStatement|cancelStatement|closeStatement|commitStatement|computeStatement|continueStatement|deleteFileStatement|deleteStatement|disableStatement|divideStatement|enableStatement|entryStatement|evaluateStatement|examineStatement|execStatement|exhibitStatement|exitStatement|generateStatement|gobackStatement|goToStatement|identifiedByStatement|ifStatement|initiateStatement|invokeStatement|mergeStatement|moveStatement|multiplyStatement|nextSentenceStatement|onStatement|openStatement|performStatement|raiseStatement|readStatement|readyTraceStatement|receiveStatement|releaseStatement|resetTraceStatement|returnStatement|rewriteStatement|rollbackStatement|purgeStatement|searchStatement|sendStatement|serviceStatement|sortStatement|startStatement|stopStatement|stringStatement|subtractStatement|suppressStatement|terminateStatement|transformStatement|unlockStatement|unstringStatement|waitStatement|writeStatement|xmlGenerateStatement|xmlParseStatement|setStatement|initializeStatement|displayStatement|inspectStatement|allocateStatement|freeStatement|(verb,water?))>
<!ELEMENT subStatementMarker (t|(t,t)|t|(t,t?,t)|(t?,t)|(t,t?,t)|(t?,t)|(t,t?,t)|(t?,t)|(t,t?,t)|(t?,t)|(t,t?,t)|(t,t?,t)|(t?,t)|(t?,t))>
<!ELEMENT continuationOfStatement ((eventPhrase,statement)|endOfStatementMarker)>
<!ELEMENT nestedStatements (statement+)>
<!ELEMENT eventPhrase (t?,t?,(t|(t,t)|t|(t,t?)|t))>
<!ELEMENT retryPhrase (t,(((identifier|integer),t)|(t,(identifier|integer),t)|t))>
<!ELEMENT endOfStatementMarker (t)>
<!ELEMENT verb (t|(t,t)|t|(t,t)|t|(t,t)|t|(t,t)|(t,t)|t)>
<!ELEMENT acceptStatement (t,(acceptFromDate|acceptFromOther|acceptFromMnemonic|acceptMessageCount|acceptScreenFormat),t?)>
<!ELEMENT acceptFromMnemonic (identifier_format2,t,mnemonicName,(onException|onEscape)?,(notOnException|notOnEscape)?)>
<!ELEMENT acceptFromOther (identifier_format2,t,(t|(t,t)|(t,t)|(t,t)|(t,t)|(t,t)|t|(t+,identifier)|(t,t)|(t,t)))>
<!ELEMENT acceptScreenFormat ((t|identifier),unitPhrase?,(dtLineColPositioning|dtAtPositioning)?,(t,t)?,modeIsBlockPhrase?,(t,screenEntryPhrase+)?,(onException|onEscape)?,(notOnException|notOnEscape)?)>
<!ELEMENT acceptFromDate (identifier_format2,t,((t,t?)|(t,t?)|t))>
<!ELEMENT acceptMessageCount (identifier,t?,t)>
<!ELEMENT unitPhrase (t,(identifier|literal))>
<!ELEMENT modeIsBlockPhrase (t,t?,t)>
<!ELEMENT addStatement (t,(addition_format1|addition_format2|addition_format3),(t+,nestedStatements)?,(t,t+,nestedStatements)?,t?)>
<!ELEMENT addition_format1 (t,qualifiedDataName,t,qualifiedDataName,t?)>
<!ELEMENT addition_format2 ((identifier|literal)+,(t,(identifier|literal))?,t,(qualifiedDataName,t?)+)>
<!ELEMENT addition_format3 ((identifier|literal)+,t,(identifier,t?)+)>
<!ELEMENT allocateStatement (t,((arithmeticExpression,t)|qualifiedDataName),t?,(t,qualifiedDataName)?)>
<!ELEMENT alterStatement (t,(procedureName,t,(t,t)?,procedureName)+)>
<!ELEMENT callStatement (t,(t|(mnemonicName,(alphanumericLiteral|identifier))|((alphanumericLiteral|identifier),(t,(t|programName))?)),callUsing?,callGivingOrReturning?,(onOverflow|(onException,notOnException?)|notOnException)?,t?)>
<!ELEMENT callUsing (t,(((t?,t)?,((t+,identifier)|t|identifier|literal))|(t?,t,((t+,identifier)|arithmeticExpression|identifier|literal))|(t?,t,((t+,identifier,(t,t?,((t+,identifier)|integer)?)?)|(integer,t,t?,((t+,identifier)|integer)?)|arithmeticExpression|identifier|literal)))+)>
<!ELEMENT callGivingOrReturning (t,(t|(t,t))?,identifier)>
<!ELEMENT onOverflow (t?,t,nestedStatements)>
<!ELEMENT onException (t?,t,nestedStatements)>
<!ELEMENT notOnException (t,t?,t,nestedStatements)>
<!ELEMENT onEscape (t?,t,nestedStatements)>
<!ELEMENT notOnEscape (t,t?,t,nestedStatements)>
<!ELEMENT programID (identifier|alphanumeric)>
<!ELEMENT cancelStatement (t,(identifier|alphanumeric)+)>
<!ELEMENT chainStatement (t,(identifier|literal),chainUsing?,t?)>
<!ELEMENT chainUsing (t,(literal|identifier)*,((t?,t,(((t,t)?,identifier)|t|literal)+)|(t?,t,(literal|identifier)+)|(t?,t,(((t,t)?,identifier)|(integer,(t,t?,integer)?)|literal)+))*)>
<!ELEMENT closeStatement (t,(fileName,((t?,((t,t)|t))|(t,(t?,t)?)|(t?,t))?)+)>
<!ELEMENT commitStatement (t)>
<!ELEMENT computeStatement (t,(qualifiedDataName,t?)+,t,arithmeticExpression,(t+,nestedStatements)?,(t,t+,nestedStatements)?,t?)>
<!ELEMENT continueStatement (t)>
<!ELEMENT deleteStatement (t,fileName,t?,(t,t?,nestedStatements)?,(t+,nestedStatements)?,t?)>
<!ELEMENT deleteFileStatement (t+,fileName+)>
<!ELEMENT disableStatement (t,((t,t?)|(t,t)|t),cdName,t?,t,(literal|identifier))>
<!ELEMENT displayStatement (t,(displayTerminalFormat|displayDeviceFormat),t?)>
<!ELEMENT displayDeviceFormat ((identifier|literal)+,uponClause?,withNoAdvancing?,onException?,notOnException?)>
<!ELEMENT uponClause (t,(t|environmentName|mnemonicName))>
<!ELEMENT withNoAdvancing (t?,t,t)>
<!ELEMENT displayTerminalFormat (((t|identifier|literal),(t,(identifier|literal))?,(dtAtPositioning|dtLineColPositioning),uponClause?,modeIsBlockPhrase?,(t?,screenEntryPhrase+)?)+)>
<!ELEMENT dtAtPositioning (t,(identifier|literal))>
<!ELEMENT dtLineColPositioning (t?,((dtLinePos,dtColPos?)|(dtColPos,dtLinePos?)))>
<!ELEMENT dtLinePos (t,t?,t?,t?,(identifier|literal))>
<!ELEMENT dtColPos (t,t?,t?,t?,(identifier|literal))>
<!ELEMENT screenEntryPhrase (autoPhrase|beepPhrase|blankPhrase|blankWhenZero|blinkPhrase|boldPhrase|capitalizationPhrase|controlPhrase|convertPhrase|cursorPhrase|echoPhrase|erasePhrase|fillPhrase|fullPhrase|gridPhrase|justificationPhrase|justified|highPhrase|lowPhrase|linePhrase|offPhrase|picture|promptPhrase|requiredPhrase|reversePhrase|scrollPhrase|securePhrase|sizePhrase|standardPhrase|foregroundPhrase|backgroundPhrase|timeoutPhrase|trailingSignPhrase|tabPhrase|timePhrase|updatePhrase)>
<!ELEMENT autoPhrase (t)>
<!ELEMENT backgroundPhrase (t,t?,integer)>
<!ELEMENT beepPhrase (t?,t)>
<!ELEMENT blankPhrase (t,t)>
<!ELEMENT blinkPhrase (t)>
<!ELEMENT boldPhrase (t)>
<!ELEMENT capitalizationPhrase (t)>
<!ELEMENT controlPhrase (t,t?,(identifier_format2|literal))>
<!ELEMENT convertPhrase (t)>
<!ELEMENT cursorPhrase (t,(identifier|literal))>
<!ELEMENT echoPhrase (t)>
<!ELEMENT erasePhrase (t,t?)>
<!ELEMENT foregroundPhrase (t,t?,integer)>
<!ELEMENT fullPhrase (t)>
<!ELEMENT gridPhrase (t)>
<!ELEMENT highPhrase (t)>
<!ELEMENT linePhrase (t)>
<!ELEMENT lowPhrase (t)>
<!ELEMENT offPhrase (t)>
<!ELEMENT promptPhrase (t,((t,t?,identifier)|(t?,t?,literal))?)>
<!ELEMENT requiredPhrase (t)>
<!ELEMENT reversePhrase (t)>
<!ELEMENT scrollPhrase (t+,(t?,(integer|identifier),t)?)>
<!ELEMENT securePhrase (t)>
<!ELEMENT sizePhrase (t,t?,(identifier|literal))>
<!ELEMENT standardPhrase (t)>
<!ELEMENT tabPhrase (t)>
<!ELEMENT timePhrase (t?,t,(identifier|literal))>
<!ELEMENT timeoutPhrase (t+,(identifier|integer))>
<!ELEMENT justificationPhrase (t)>
<!ELEMENT fillPhrase (t)>
<!ELEMENT trailingSignPhrase (t)>
<!ELEMENT updatePhrase (t)>
<!ELEMENT divideStatement (t,(division_format1|division_format2|division_format3),(t+,nestedStatements)?,(t,t+,nestedStatements)?,t?)>
<!ELEMENT division_format1 ((identifier|literal),t,(identifier|literal),t,qualifiedDataName,t?,t,qualifiedDataName)>
<!ELEMENT division_format2 ((identifier|literal),t,(identifier|literal),t,(qualifiedDataName,t?)+)>
<!ELEMENT division_format3 ((identifier|literal),t,(qualifiedDataName,t?)+)>
<!ELEMENT enableStatement (t,((t,t?)|(t,t)|t),cdName,t?,t,(literal|identifier))>
<!ELEMENT entryStatement (t,literal,mnemonicName?,(t,((t?,t)?,(t|(dataName,(t,(t,t)?)?)))+,(t,(integer,t,integer)?)?)?,(t,dataName)?)>
<!ELEMENT evaluateStatement (t,subject,(t,subject)*,when+,whenOther?,t?)>
<!ELEMENT subject (condition|arithmeticExpression|identifier|literal)>
<!ELEMENT when ((t,object,(t,object)*)+,nestedStatements)>
<!ELEMENT whenOther (t+,nestedStatements)>
<!ELEMENT object (t|rangeExpression|t|condition|(t?,(arithmeticExpression|identifier|literal))|(t,object,t))>
<!ELEMENT rangeExpression (t?,(arithmeticExpression|identifier|literal),t,(arithmeticExpression|identifier|literal))>
<!ELEMENT examineStatement (t,identifier,((t,((t,t)|t),literal,(t+,literal)?)|(t,(t|(t,t)),literal,t,literal)))>
<!ELEMENT execStatement (execSQLStatement|execCICSStatement|execDLIStatement|execHTMLStatement|execTextDataStatement)>
<!ELEMENT execSQLStatement (t+,sqlStatement,water?,t)>
<!ELEMENT sqlStatement (sqlInclude|sqlSelect|sqlInsert|sqlUpdate|sqlDelete)>
<!ELEMENT sqlInclude (t,textName)>
<!ELEMENT sqlSelect ((t|(t,water?,t)),water?,t,(identifier,t)?,tableName)>
<!ELEMENT sqlInsert (t+,(identifier,t)?,tableName)>
<!ELEMENT sqlUpdate (t,(identifier,t)?,tableName)>
<!ELEMENT sqlDelete (t+,(identifier,t)?,tableName)>
<!ELEMENT tableName (cobolWord)>
<!ELEMENT execCICSStatement (t+,cicsStatement,water?,t)>
<!ELEMENT cicsStatement (cicsReadQ|cicsWriteQ|cicsDeleteQ|cicsReadFile|cicsWriteFile|cicsLink|cicsXctl|cicsLoad|cicsStart)>
<!ELEMENT dataArea (literal|identifier)>
<!ELEMENT cicsReadQ (t,((t+,queueName,t,((t+,cicsSysid,t)|(t+,dataArea,t,(t,cicsWaterInBrackets)?)|((t,cicsWaterInBrackets)|t)|(t,cicsWaterInBrackets))*)|(t+,(literal|identifier),t)))>
<!ELEMENT cicsWriteQ (t,((t+,queueName,t,((t+,cicsSysid,t)|(t+,dataArea,t,(t,cicsWaterInBrackets)?)|((t,cicsWaterInBrackets)|(t,cicsWaterInBrackets,t?))|t)*)|(t+,queueName,t)))>
<!ELEMENT cicsDeleteQ (t+,queueName,t,(t+,cicsSysid,t)?)>
<!ELEMENT cicsReadFile ((t+,fileName,t,((t+,cicsSysid,t)|(t+,dataArea,t,(t,cicsWaterInBrackets)?)|(t,cicsWaterInBrackets,(t,cicsWaterInBrackets,t?)?)|(t)|(t|(t+,cicsWaterInBrackets))|t)*)|(t+,fileName,t,((t+,cicsSysid,t)|(t+,dataArea,t,(t,cicsWaterInBrackets)?)|(t,cicsWaterInBrackets,(t,cicsWaterInBrackets)?)|(t)|(t|(t+,cicsWaterInBrackets))|t)*))>
<!ELEMENT cicsWriteFile (t+,fileName,t,((t+,cicsSysid,t)|(t+,dataArea,t,(t,cicsWaterInBrackets)?)|(t,cicsWaterInBrackets,(t,cicsWaterInBrackets)?)|(t)|t)*)>
<!ELEMENT cicsLink (t+,programID,t,((t+,cicsSysid,t)|(t+,commareaName,t,(t,cicsWaterInBrackets)?,(t,cicsWaterInBrackets)?)|t|(t,cicsWaterInBrackets)|(t,cicsWaterInBrackets,(t,cicsWaterInBrackets)?)|(t,cicsWaterInBrackets))*)>
<!ELEMENT cicsXctl (t+,programID,t,((t+,commareaName,t,(t,cicsWaterInBrackets)?)|(t,cicsWaterInBrackets,(t,cicsWaterInBrackets)?)|(t,cicsWaterInBrackets))*)>
<!ELEMENT cicsLoad (t+,programID,t)>
<!ELEMENT cicsStart (t+,transactionName,t)>
<!ELEMENT cicsSysid (literal|identifier)>
<!ELEMENT queueName (literal|identifier)>
<!ELEMENT transactionName (literal|identifier)>
<!ELEMENT commareaName (literal|identifier)>
<!ELEMENT cicsWaterInBrackets (t,water?,t)>
<!ELEMENT execDLIStatement (t+,water?,t)>
<!ELEMENT execHTMLStatement (t+,water?,t)>
<!ELEMENT execTextDataStatement (t,textName,water?,t)>
<!ELEMENT exitStatement (t,((t,returningPhrase?)|t|(t,t?)|t)?)>
<!ELEMENT returningPhrase (t,(integer|(t+,identifier)))>
<!ELEMENT generateStatement (t,(dataName|reportName))>
<!ELEMENT freeStatement (t,((t,t?)?,qualifiedDataName)+)>
<!ELEMENT gobackStatement (t,(t,(((t,t)?,identifier)|integer))?)>
<!ELEMENT goToStatement (t,t?,(procedureName,(procedureName*,t,t?,identifier)?)?)>
<!ELEMENT ifStatement (t,condition,t?,(nestedStatements|(t,t)),(t,(nestedStatements|(t,t)))?,t?)>
<!ELEMENT initiateStatement (t,reportName+)>
<!ELEMENT invokeStatement (t,identifier,(t,(t|identifier))?,(literal|identifier),(t,(((t?,t)?,((t+,identifier)|t|literal|identifier))|(t?,t,((t+,identifier)|arithmeticExpression|literal|identifier))|(t?,t,((t+,identifier)|(integer,t,t?,integer)|arithmeticExpression|integer|identifier)))+)?,(t,(t|(t,t))?,identifier)?)>
<!ELEMENT exhibitStatement (t,(t|(t,t)|t),(identifier|literal))>
<!ELEMENT identifiedByStatement (t,t?,(dataName|literal),(t?,t)?)>
<!ELEMENT initializeStatement (t,identifier+,replacingInitClause?,water?)>
<!ELEMENT replacingInitClause (t,replacementTarget,t?,t,(identifier|literal))>
<!ELEMENT replacementTarget (t)>
<!ELEMENT inspectStatement (t,identifier,(convertingPhrase|(tallyingPhrase,replacingPhrase?)|replacingPhrase))>
<!ELEMENT convertingPhrase (t,(identifier|literal),t,(identifier|literal),locationPhrase*)>
<!ELEMENT tallyingPhrase (t,(qualifiedDataName,t,(tallyingCharactersPhrase|tallyingAllLeadingOrTrailingPhrase)*)*)>
<!ELEMENT tallyingCharactersPhrase (t,locationPhrase*)>
<!ELEMENT tallyingAllLeadingOrTrailingPhrase (t,((identifier|literal),locationPhrase*)*)>
<!ELEMENT replacingPhrase (t,(replacingCharactersPhrase|replacingAllLeadingFirstOrTrailingPhrase)*)>
<!ELEMENT replacingCharactersPhrase (t+,(identifier|literal),locationPhrase*)>
<!ELEMENT replacingAllLeadingFirstOrTrailingPhrase (t,((identifier|literal),t,(identifier|literal),locationPhrase*)*)>
<!ELEMENT locationPhrase (t,t?,(identifier|literal))>
<!ELEMENT mergeStatement (t,fileName,(t?,t,t?,t?,dataName+)+,(t?,t,t?,alphabetName)?,t,fileName,fileName+,((t+,procedureName,(t,procedureName)?)|(t,fileName+)))>
<!ELEMENT moveStatement (t,((t,t?,identifier)|(t?,identifier)|literal),t,identifier+,water?)>
<!ELEMENT multiplyStatement (t,(multiplication_format1|multiplication_format2),(t+,nestedStatements)?,(t,t+,nestedStatements)?,t?)>
<!ELEMENT multiplication_format1 ((identifier|literal),t,(identifier|literal),t,(qualifiedDataName,t?)+)>
<!ELEMENT multiplication_format2 ((identifier|literal),t,(qualifiedDataName,t?)+)>
<!ELEMENT nextSentenceStatement (t,t)>
<!ELEMENT onStatement (t,(literal|identifier),(t+,(literal|identifier))?,(t,(literal|identifier))?,(nestedStatements|(t,t)),(t,(nestedStatements|(t,t)))?)>
<!ELEMENT openStatement (t,((t,(fileName,(t|(t?,t,t))?)+)|(t,(fileName,(t?,t,t)?)+)|(t,fileName+)|(t,fileName+))+)>
<!ELEMENT performStatement (t,(((times|until|varying)?,((nestedStatements,t)|statement))|(procedureName,(t,procedureName)?,(times|until|varying)?)|(t,identifier,t,identifier,nestedStatements,t)))>
<!ELEMENT times ((identifier|integer),t)>
<!ELEMENT testPosition (t?,t,t)>
<!ELEMENT until (testPosition?,t,(condition|t))>
<!ELEMENT varying (testPosition?,t,identifier,t,(literal|identifier),t,(literal|identifier),t,condition,(t,identifier,t,(literal|identifier),t,(literal|identifier),t,condition)*)>
<!ELEMENT purgeStatement (t,cdName)>
<!ELEMENT raiseStatement (t,identifier?)>
<!ELEMENT readStatement (t,fileName,t?,t?,(t,identifier_format2)?,((t,t?,t)|(t,t)|(t?,((t?,t)|t))|retryPhrase)?,(t,t?,qualifiedDataName)?,(t?,t,nestedStatements)?,(t,t?,t,nestedStatements)?,(t,t?,nestedStatements)?,(t+,nestedStatements)?,t?)>
<!ELEMENT readWithClause (t?,(readLockClause|t))>
<!ELEMENT readLockClause (t?,t)>
<!ELEMENT readyTraceStatement (t+)>
<!ELEMENT receiveStatement (t,((dataName,t,((t,dataName)|(t,t)|(t,t)),((t,t?,(numeric|identifier))|(t?,t,t)|(t,t?,dataName)|(t,t?,(numeric|identifier))|(t,t?,(alphanumericLiteral|identifier))|onException|notOnException)*)|(cdName,t,t?,identifier,(t+,nestedStatements)?,(t+,nestedStatements)?)),t?)>
<!ELEMENT releaseStatement (t,recordName,(t,identifier)?)>
<!ELEMENT resetTraceStatement (t+)>
<!ELEMENT returnStatement (t,fileName,t?,(t,identifier)?,atEnd,notAtEnd?,t?)>
<!ELEMENT rewriteStatement (t,recordName,(t,(identifier|literal))?,retryPhrase?,(t?,t?,t)?,(t,t?,nestedStatements)?,(t+,nestedStatements)?,t?)>
<!ELEMENT rollbackStatement (t)>
<!ELEMENT searchStatement (t,((t,identifier)|(identifier,(t,(identifier|indexName))?)),atEnd?,(t,condition,(nestedStatements|(t,t)))+,t?)>
<!ELEMENT atEnd (t?,t,nestedStatements)>
<!ELEMENT notAtEnd (t,t?,t,nestedStatements)>
<!ELEMENT sendStatement (t,((dataName,t,((t,t)|(t,t)|(t?,dataName)+))|(cdName,(t,identifier)?,(t?,(t|identifier),(t,t?,(t|((zero|integer|identifier),t?)|mnemonicName))?,(t,t?)?)?)))>
<!ELEMENT serviceStatement (t,(t|(t,identifier)))>
<!ELEMENT sortStatement ((t,fileName,(t,(t,t?,t?,qualifiedDataName+)+)+,(t?,t,(t,t)?)?,(t?,t,t?,alphabetName)?,((t+,procedureName,(t,procedureName)?)|(t,fileName+)),((t+,procedureName,(t,procedureName)?)|(t,fileName+)))|(t,dataName,(t,(t,t?,t?,qualifiedDataName+)+)+,(t?,t,(t,t)?)?,(t?,t,t?,alphabetName)?))>
<!ELEMENT setStatement (t,(setFormatMonitorValue|setFormatDataPointerAssignment|setFormatProcedurePointerAssignment|setFormatSemaphoreValue|setFormat1|setFormat2|setFormat3),water?)>
<!ELEMENT setFormat1 ((indexName|identifier)+,t,(indexName|identifier|integer))>
<!ELEMENT setFormat2 (mnemonicName+,t,t)>
<!ELEMENT setFormat3 (identifier+,t,t)>
<!ELEMENT setFormatDataPointerAssignment (((t,t?,identifier)|identifier)+,t,((t,t?,identifier)|mnemonicName|t))>
<!ELEMENT setFormatProcedurePointerAssignment (procedureName,t,(procedureName|(t,(identifier|literal))|t))>
<!ELEMENT setFormatMonitorValue (mnemonicName+,t,t?,t,(t+,t)?)>
<!ELEMENT setFormatSemaphoreValue (mnemonicName+,t+,(integer|identifier))>
<!ELEMENT startStatement (t,fileName,keyModifier?,sizeModifier?,whileKeyModifier?,(t,t?,nestedStatements)?,(t+,nestedStatements)?,t?)>
<!ELEMENT keyModifier (t,t?,(generalRelationOp|t),identifier,(t,identifier)*)>
<!ELEMENT sizeModifier (t?,t,(identifier|integer))>
<!ELEMENT whileKeyModifier (t,(t,t?)?,negationOp?,t,likeMods*,(identifier|literal))>
<!ELEMENT likeMods (trimmedRight|trimmedLeft|caseSensitive|caseInsensitive)>
<!ELEMENT trimmedRight (t,t)>
<!ELEMENT trimmedLeft (t,t)>
<!ELEMENT caseSensitive (t)>
<!ELEMENT caseInsensitive (t)>
<!ELEMENT stopStatement ((t,literal)|(t+,(t,(((t,t)?,identifier)|(integer,(t,t?,integer)?)))?)|(t,t))>
<!ELEMENT stringStatement (t,((identifier|literal),(t,t?,(t|identifier|literal))?)+,t,identifier,(t?,t,identifier)?,(t?,t,nestedStatements)?,(t,t?,t,nestedStatements)?,t?)>
<!ELEMENT subtractStatement (t,(subtraction_format1|subtraction_format2|subtraction_format3),(t+,nestedStatements)?,(t,t+,nestedStatements)?,t?)>
<!ELEMENT subtraction_format1 (t,identifier,t,identifier,t?)>
<!ELEMENT subtraction_format2 ((identifier|literal)+,(t,(identifier|literal))?,t,(identifier,t?)+)>
<!ELEMENT subtraction_format3 ((identifier|literal)+,t,(identifier,t?)+)>
<!ELEMENT suppressStatement (t,t?)>
<!ELEMENT terminateStatement (t,reportName+)>
<!ELEMENT transformStatement (t,identifier,t?,t,(figurativeConstant|alphanumericLiteral|identifier),t,(figurativeConstant|alphanumericLiteral|identifier))>
<!ELEMENT unlockStatement (t,fileName,t?)>
<!ELEMENT unstringStatement (t,identifier,(t,t?,t?,(identifier|literal),(t,t?,(identifier|literal))*)?,t,(identifier,(t,t?,identifier)?,(t,t?,identifier)?)+,(t?,t,identifier)?,(t,t?,identifier)?,(t?,t,nestedStatements)?,(t,t?,t,nestedStatements)?,t?)>
<!ELEMENT useStatement (t,(errorDeclarative|debugDeclarative|labelDeclarative|beforeReportingDeclarative),t)>
<!ELEMENT errorDeclarative (t?,t,t+,(t|fileName*),(t,dataName,dataName?)?)>
<!ELEMENT debugDeclarative (t?,t,t?,((t,t)|((t,t?,t?)?,identifier)|procedureName|fileName)*)>
<!ELEMENT labelDeclarative (t?,t,t+,(t|fileName*))>
<!ELEMENT beforeReportingDeclarative (t+,identifier)>
<!ELEMENT waitStatement ((t,t?,threadPointer,(t,t?,identifier)?,(t,t?,identifier)?,onException?,notOnException?,t?)|(t,t?,eventPointer))>
<!ELEMENT writeStatement (t,recordName,(t,(identifier|literal))?,(t,t?,(((identifier|integer|zero),t?)|mnemonicName|t))?,(t?,t,nestedStatements)?,(t,t?,t,nestedStatements)?,retryPhrase?,(t?,t?,t)?,(t,t?,nestedStatements)?,(t+,nestedStatements)?,t?)>
<!ELEMENT xmlGenerateStatement (t+,identifier,t,identifier,(t,t?,identifier)?,(t?,t,statement)?,(t,t?,t,statement)?,t?)>
<!ELEMENT xmlParseStatement (t+,identifier,(t+,procedureName)?,(t,procedureName)?,(t?,t,statement)?,(t,t?,t,statement)?,t?)>
<!ELEMENT compilerStatement (compilerDirective|compilerIfStatement|compilerDisplayStatement|copyStatement|replaceStatement|useStatement)>
<!ELEMENT compilerDirective ((t,t),water?)>
<!ELEMENT compilerIfStatement (t+,operand,(t|(t?,t)|(t?,t,operand))?,(compilerStatement|nestedStatements),(t+,(compilerStatement|nestedStatements))?,t,t)>
<!ELEMENT compilerDisplayStatement (t+,((t+,literal)|textName))>
<!ELEMENT copyStatement (t,textName,(t,libraryName)?,t?,copyReplacingPhrase?,t)>
<!ELEMENT copyReplacingPhrase (t,copyReplacementInstruction+)>
<!ELEMENT copyReplacementInstruction (copyOperandName,t,copyOperandName)>
<!ELEMENT copyOperandName ((t?,pseudoLiteral)|verb|literal|identifier|cobolWord)>
<!ELEMENT replaceStatement (t,(t|((pseudoLiteral,t,pseudoLiteral)|(t,pseudoLiteral,t,pseudoLiteral))+),t?)>
<!ELEMENT pseudoText (cobolWord)>
<!ELEMENT partialWord (cobolWord)>
<!ELEMENT sourceFormattingDirective (ejectStatement|skipStatement|titleStatement)>
<!ELEMENT ejectStatement (t,t?)>
<!ELEMENT skipStatement (t,t?)>
<!ELEMENT titleStatement (t,literal,t?)>
<!ELEMENT divisionStart (((t,t)|(t,t)|(t,t)|(t+,usingOrChainingPhrase?,returningProcedurePhrase?)),t)>
<!ELEMENT sectionStart (t+,t)>
<!ELEMENT paragraphStart (t,t)>
<!ELEMENT endOfStatement (verb|t|(t?,t?,(t|(t,t)|(t,t?)|t)))>
<!ELEMENT function (t,((t+,argument,t)|(t+,argument,t)|(t+,argument,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,argument,t)|(t+,argument+,t)|(t+,argument,t)|t|(t+,argument,t)|(t+,argument,argument?,t)|(t+,argument,t)|(t+,argument,argument?,t)|(t+,argument,argument?,t)|t|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,argument?,t)|(t+,argument,argument?,t)|(t+,argument,argument?,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument+,t)|(t+,argument+,t)|(t+,argument+,t)|(t+,argument+,t)|(t+,argument+,t)|(t+,argument,argument,t)|(t+,argument,argument?,t)|(t+,argument,t)|(t+,argument,argument?,t)|(t+,argument,t)|(t+,argument+,t)|(t+,argument+,t)|t|(t+,argument,argument+,t)|(t,(t,argument,t)?)|(t+,argument+,t)|(t+,argument,argument,t)|(t+,argument,t)|(t+,argument,argument,t)|t|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument+,t)|(t+,argument,t)|(t+,argument+,t)|(t+,argument+,t)|(t+,argument+,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t)|(t+,argument,t?,t)|(t+,argument,t)|(t+,argument+,t)|t|(t+,argument,argument?,t)|(functionName,(t,argument+,t)?)))>
<!ELEMENT identifier (identifier_format6|identifier_format1|identifier_format2|dataAddressIdentifier)>
<!ELEMENT identifier_format1 (function,referenceModifier?)>
<!ELEMENT identifier_format2 (qualifiedDataName,referenceModifier?)>
<!ELEMENT identifier_format6 (t|((className,t)?,t))>
<!ELEMENT dataAddressIdentifier (t,t?,identifier)>
<!ELEMENT argument (arithmeticExpression|identifier|literal)>
<!ELEMENT qualifier ((t,dataName)*)>
<!ELEMENT subscript (relativeSubscript|directSubscript)>
<!ELEMENT directSubscript (t|identifier|integer)>
<!ELEMENT relativeSubscript (identifier,t,integer)>
<!ELEMENT referenceModifier (t,arithmeticExpression,t,arithmeticExpression?,t)>
<!ELEMENT arithmeticExpression (bitwiseOperand,(bitwiseOperator,bitwiseOperand)*)>
<!ELEMENT bitwiseOperator (t)>
<!ELEMENT bitwiseOperand (summand,(signDef,summand)*)>
<!ELEMENT signDef (t)>
<!ELEMENT summand (factor,(t,factor)*)>
<!ELEMENT unaryOperator (t)>
<!ELEMENT factor (unaryOperator?,atomicExpression,(t,unaryOperator?,atomicExpression)*)>
<!ELEMENT atomicExpression (zero|identifier|numeric|(t,arithmeticExpression,t))>
<!ELEMENT condition ((primaryCondition|(negationOp?,t,condition,t)),(conditionalRelationOP,(primaryCondition|(negationOp?,t,condition,t)))*)>
<!ELEMENT primaryCondition (negationOp?,primaryCondDef)>
<!ELEMENT primaryCondDef (bit|(classPrimaryCondition,(conditionalRelationOP,negationOp?,classSecondaryCondition)*)|signPrimaryCondition|(generalPrimaryCondition,(conditionalRelationOP,negationOp?,generalSecondaryCondition)*)|(monoElemPrimaryCondition,(t?,negationOp?,monoElemPrimaryCondition)*))>
<!ELEMENT generalPrimaryCondition (operand,generalRelationOp,operand)>
<!ELEMENT signPrimaryCondition ((arithmeticExpression|identifier),t?,negationOp?,signType)>
<!ELEMENT signType (t|zero)>
<!ELEMENT monoElemPrimaryCondition (t?,(conditionName|className))>
<!ELEMENT classPrimaryCondition (identifier,t?,negationOp?,classType)>
<!ELEMENT classType (t)>
<!ELEMENT generalSecondaryCondition (generalRelationOp?,operand)>
<!ELEMENT classSecondaryCondition (t?,negationOp?,classType)>
<!ELEMENT conditionalRelationOP (t)>
<!ELEMENT generalRelationOp (t?,((negationOp?,greaterOrEqualOp)|(negationOp?,lessOrEqualOp)|(negationOp?,greaterThanOp)|(negationOp?,lessThanOp)|(negationOp?,equalToOp)|exceedsOp|equalsOp|unequalToOp))>
<!ELEMENT negationOp (t)>
<!ELEMENT greaterThanOp ((t,t?)|t)>
<!ELEMENT lessThanOp ((t,t?)|t)>
<!ELEMENT equalToOp ((t,t?)|t)>
<!ELEMENT exceedsOp (t)>
<!ELEMENT equalsOp (t)>
<!ELEMENT unequalToOp ((t,t?)|t)>
<!ELEMENT greaterOrEqualOp ((t,t+)|t)>
<!ELEMENT lessOrEqualOp ((t,t+)|t)>
<!ELEMENT programName (cobolWord|alphanumeric)>
<!ELEMENT dataName (cobolWord)>
<!ELEMENT qualifiedDataName (dataName,qualifier,(t,subscript+,t)?)>
<!ELEMENT dataDescName (t|dataName)>
<!ELEMENT screenName (cobolWord)>
<!ELEMENT sectionName (cobolWord|integer)>
<!ELEMENT paragraphName (cobolWord|integer)>
<!ELEMENT procedureName ((cobolWord|integer),(t,cobolWord)?)>
<!ELEMENT segmentNumber (integer)>
<!ELEMENT operand (arithmeticExpression|identifier|literal|indexName)>
<!ELEMENT threadPointer (cobolWord)>
<!ELEMENT eventPointer (cobolWord)>
<!ELEMENT conditionName (identifier)>
<!ELEMENT indexName (cobolWord)>
<!ELEMENT className (cobolWord)>
<!ELEMENT typeSpecifier (cobolWord)>
<!ELEMENT parameterName (cobolWord)>
<!ELEMENT interfaceName (cobolWord)>
<!ELEMENT methodName (cobolWord)>
<!ELEMENT propertyName (identifier|alphanumeric)>
<!ELEMENT propertyValue (identifier|literal)>
<!ELEMENT delegateName (cobolWord)>
<!ELEMENT iteratorName (cobolWord)>
<!ELEMENT enumName (cobolWord)>
<!ELEMENT valuetypeName (cobolWord)>
<!ELEMENT typeName (cobolWord)>
<!ELEMENT attributeName (cobolWord)>
<!ELEMENT typedefName (cobolWord)>
<!ELEMENT fileName (cobolWord|alphanumeric)>
<!ELEMENT computerName (cobolWord)>
<!ELEMENT functionName (cobolWord)>
<!ELEMENT textName (cobolWord|alphanumeric)>
<!ELEMENT libraryName (cobolWord)>
<!ELEMENT recordName (identifier)>
<!ELEMENT mnemonicName (identifier|cobolWord)>
<!ELEMENT environmentName (t)>
<!ELEMENT alphabetName (cobolWord)>
<!ELEMENT cdName (cobolWord)>
<!ELEMENT reportName (cobolWord)>
<!ELEMENT assignmentName (cobolWord|literal)>
<!ELEMENT literal ((literalValue,concatenatedLiteral*)|(constant,concatenatedLiteral+))>
<!ELEMENT literalValue (numericLiteral|alphanumericLiteral|figurativeConstant|bit)>
<!ELEMENT concatenatedLiteral (t,(literalValue|constant))>
<!ELEMENT value (literal|integerConstant|alphanumericConstant)>
<!ELEMENT bit (t)>
<!ELEMENT figurativeConstant ((t,literal)|(t?,(zero|space|t))|t)>
<!ELEMENT numericLiteral (integerLiteral|decimal|booleanLiteral|hexadecimal|(t,t?,identifier))>
<!ELEMENT numeric (integer|decimal|booleanLiteral|hexadecimal|zero|(t,t?,identifier))>
<!ELEMENT integer (integerLiteral|integerConstant)>
<!ELEMENT constant (integerConstant|alphanumericConstant)>
<!ELEMENT integerConstant (cobolWord)>
<!ELEMENT alphanumeric (alphanumericLiteral|alphanumericConstant)>
<!ELEMENT alphanumericConstant (cobolWord)>
<!ELEMENT cobolWord (t)>
<!ELEMENT integer (t)>
<!ELEMENT decimal (t)>
<!ELEMENT alphanumeric (t)>
<!ELEMENT pictureString (t*)>
<!ELEMENT levelNumber (t)>
<!ELEMENT pseudoLiteral (t)>
<!ELEMENT water (t*)>
<!ELEMENT t (#PCDATA)>
